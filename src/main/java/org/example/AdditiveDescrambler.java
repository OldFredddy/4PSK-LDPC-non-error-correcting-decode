package org.example;

import java.util.ArrayList;
import java.util.List;

public class AdditiveDescrambler {

    private final int polynomialDegree1 = 13; // С учетом индексации с 0
    private final int polynomialDegree2 = 14; // С учетом индексации с 0
    private final int blockSize = 114; // размер блока данных в битах
    private List<Byte> lfsr; // регистр сдвига
    private static final String


    public AdditiveDescrambler() {
        initializeLfsr("101101101101101");
    }

    private void initializeLfsr(String seed) {
        lfsr = new ArrayList<>();
        for (int i = 0; i < seed.length(); i++) {
            lfsr.add((byte) (seed.charAt(i) == '1' ? 1 : 0));
        }
    }

    public List<Byte> descramble(List<Byte> inputData) {


        return addWithPSP(inputData);
    }
    public List<Byte> addWithPSP(List<Byte> data) {
        List<Byte> result = new ArrayList<>();
        for (int i = 0; i < data.size(); i++) {
            int bitData = data.get(i);
            int bitPSP = PSP.charAt(i) == '1' ? 1 : 0;
            result.add((byte) ((bitData + bitPSP) % 2));
        }
        return result;
    }
}
